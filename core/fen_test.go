package core

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestFENErrors(t *testing.T) {
	ts := []struct {
		name      string
		fenString string
		err       error
	}{
		{
			name:      "errFENKingMissing: black king missing",
			fenString: "rnbq1bnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENKingMissing,
		},
		{
			name:      "errFENKingMissing: white king missing",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQ1BNR w KQkq - 0 1",
			err:       errFENKingMissing,
		},
		{
			name:      "errFENKingMissing: both kings missing",
			fenString: "rnbq1bnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQ1BNR w KQkq - 0 1",
			err:       errFENKingMissing,
		},
		{
			name:      "errFENDuplicateKing: duplicate black king",
			fenString: "rnbqkbnr/pppppppp/8/4k3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENDuplicateKing,
		},
		{
			name:      "errFENDuplicateKing: duplicate white king",
			fenString: "rnbqkbnr/pppppppp/8/4K3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENDuplicateKing,
		},
		{
			name:      "errFENRegexDoesNotMatch: invalid turn *",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR * KQkq - 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: missing en passant rank",
			fenString: "rnbqkbnr/pppp1ppp/8/4p3/8/8/PPPPPPPP/RNBQKBNR w KQkq e 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: invalid en passant rank",
			fenString: "rnbqkbnr/pppp1ppp/8/4p3/8/8/PPPPPPPP/RNBQKBNR w KQkq e7 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: space after 8th rank",
			fenString: "rnbqkbnr1/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: extra pawn",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: empty 6th rank",
			fenString: "rnbqkbnr/pppppppp//8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errBoardImpossibleEnPassant: square valid, but no pawn",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq e6 0 1",
			err:       errBoardImpossibleEnPassant,
		},
		{
			name:      "errBoardImpossibleEnPassant: square valid, but black pawn didn't do en passant",
			fenString: "rnbqkbnr/ppppp1pp/5p2/8/8/8/PPPPPPPP/RNBQKBNR w KQkq e6 0 1",
			err:       errBoardImpossibleEnPassant,
		},
		{
			name:      "errBoardImpossibleEnPassant: square valid, but white pawn one move away from en passant",
			fenString: "rnbqkbnr/pppppppp/8/P7/8/8/1PPPPPPP/RNBQKBNR w KQkq e3 0 1",
			err:       errBoardImpossibleEnPassant,
		},
		{
			name:      "errBoardImpossibleBlackCastle: black king has moved",
			fenString: "r4k1r/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w KQkq - 0 1",
			err:       errBoardImpossibleBlackCastle,
		},
		{
			name:      "errBoardImpossibleWhiteCastle: white king has moved",
			fenString: "r3k2r/pppppppp/8/8/8/8/PPPPPPPP/R2K3R w KQkq - 0 1",
			err:       errBoardImpossibleWhiteCastle,
		},
		{
			name:      "errBoardImpossibleBlackQueensideCastle: no rook",
			fenString: "4k2r/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w KQkq - 0 1",
			err:       errBoardImpossibleBlackQueensideCastle,
		},
		{
			name:      "errBoardImpossibleBlackQueensideCastle: rook has moved",
			fenString: "1r2k2r/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w KQkq - 0 1",
			err:       errBoardImpossibleBlackQueensideCastle,
		},
		{
			name:      "errBoardImpossibleBlackKingsideCastle: no rook",
			fenString: "r3k3/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w KQkq - 0 1",
			err:       errBoardImpossibleBlackKingsideCastle,
		},
		{
			name:      "errBoardImpossibleBlackKingsideCastle: rook has moved",
			fenString: "r3k1r1/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w KQkq - 0 1",
			err:       errBoardImpossibleBlackKingsideCastle,
		},
		{
			name:      "errBoardImpossibleWhiteQueensideCastle: no rook",
			fenString: "r3k2r/pppppppp/8/8/8/8/PPPPPPPP/4K2R w KQkq - 0 1",
			err:       errBoardImpossibleWhiteQueensideCastle,
		},
		{
			name:      "errBoardImpossibleWhiteQueensideCastle: rook has moved",
			fenString: "r3k2r/pppppppp/8/8/8/8/PPPPPPPP/1R2K2R w KQkq - 0 1",
			err:       errBoardImpossibleWhiteQueensideCastle,
		},
		{
			name:      "errBoardImpossibleWhiteKingsideCastle: no rook",
			fenString: "r3k2r/pppppppp/8/8/8/8/PPPPPPPP/R3K3 w KQkq - 0 1",
			err:       errBoardImpossibleWhiteKingsideCastle,
		},
		{
			name:      "errBoardImpossibleWhiteKingsideCastle: rook has moved",
			fenString: "r3k2r/pppppppp/8/8/8/8/PPPPPPPP/R3K1R1 w KQkq - 0 1",
			err:       errBoardImpossibleWhiteKingsideCastle,
		},
		{
			name:      "errFENRegexDoesNotMatch: extra spaces 1",
			fenString: " rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: extra spaces 2",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR  w KQkq - 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: extra spaces 3",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq  - 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: extra spaces 4",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -  0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: extra spaces 5",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0  1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: extra spaces 6",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 ",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: entraneouos castling character",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w *Qkq - 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: entraneouos en passant character",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq * 0 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: entraneouos full move number character",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - * 1",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENRegexDoesNotMatch: entraneouos half clock move number character",
			fenString: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 *",
			err:       errFENRegexDoesNotMatch,
		},
		{
			name:      "errFENPawnInImpossibleRank: black pawn in 8th rank",
			fenString: "p7/7k/8/8/8/8/7K/8 w KQkq - 0 1",
			err:       errFENPawnInImpossibleRank,
		},
		{
			name:      "errFENPawnInImpossibleRank: black pawn in 1st rank",
			fenString: "8/7k/8/8/8/8/7K/p7 w KQkq - 0 1",
			err:       errFENPawnInImpossibleRank,
		},
		{
			name:      "errFENPawnInImpossibleRank: white pawn in 8th rank",
			fenString: "P7/7k/8/8/8/8/7K/8 w KQkq - 0 1",
			err:       errFENPawnInImpossibleRank,
		},
		{
			name:      "errFENPawnInImpossibleRank: white pawn in 1st rank",
			fenString: "8/7k/8/8/8/8/7K/P7 w KQkq - 0 1",
			err:       errFENPawnInImpossibleRank,
		},
		{
			name:      "errFENBlackHasMoreThan16Pieces: black has 17 pieces",
			fenString: "rnbqkbnr/pppppppp/p7/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENBlackHasMoreThan16Pieces,
		},
		{
			name:      "errFENWhiteHasMoreThan16Pieces: white has 17 pieces",
			fenString: "rnbqkbnr/pppppppp/8/8/8/P7/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
			err:       errFENWhiteHasMoreThan16Pieces,
		},
	}
	for _, tc := range ts {
		t.Run(tc.name, func(t *testing.T) {
			_, err := NewGameFromFEN(tc.fenString)
			assert.Equal(t, tc.err, err)
		})
	}
}

func TestFENConvertsBackToItself(t *testing.T) {
	ts := []string{
		"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
		"8/8/8/8/8/1k5P/8/2K5 w - - 0 1",
		"8/8/8/6K1/8/5k2/P7/8 w - - 0 1",
		"4k3/8/3K4/4P3/8/8/8/8 w - - 0 1",
		"8/5k2/3P4/8/6K1/8/8/8 w - - 0 1",
		"3k4/8/1P6/8/4K3/8/8/8 w - - 0 1",
		"6k1/8/7K/8/2P5/8/8/8 w - - 0 1",
		"8/7k/5K2/6P1/8/8/8/8 w - - 0 1",
		"8/8/5k2/8/5K2/8/4P3/8 w - - 0 1",
		"8/7k/8/8/8/3P4/8/6K1 w - - 0 1",
		"8/8/8/1k6/8/K7/6P1/8 w - - 0 1",
		"3k4/8/K7/8/8/8/P7/8 w - - 0 1",
		"7k/7P/6P1/8/8/6K1/8/8 w - - 0 1",
		"6k1/8/5KP1/6P1/8/8/8/8 w - - 0 1",
		"8/8/8/8/2k5/P1P5/7K/8 w - - 0 1",
		"8/8/5Ppk/8/8/4K3/8/8 w - - 0 1",
		"8/8/5k2/8/p7/8/1PK5/8 w - - 0 1",
		"8/8/2p5/8/8/P4k2/8/2K5 w - - 0 1",
		"8/p4K2/P7/8/8/8/1k6/8 w - - 0 1",
		"8/8/8/7p/1PK2k2/8/8/8 w - - 0 1",
		"8/8/8/3KP1k1/6p1/8/8/8 w - - 0 1",
		"8/1p6/7K/8/7P/8/5k2/8 w - - 0 1",
		"8/8/5P2/8/6K1/7p/6k1/8 w - - 0 1",
		"8/8/1p6/8/8/6P1/k1K5/8 w - - 0 1",
		"8/6p1/7k/8/1K6/8/1P6/8 w - - 0 1",
		"8/1pK5/8/8/8/8/k4P2/8 w - - 0 1",
		"8/2p5/6K1/8/8/5k2/P7/8 w - - 0 1",
		"8/4K1pp/8/8/8/8/k6P/8 w - - 0 1",
		"8/6k1/1p6/6KP/P7/8/8/8 w - - 0 1",
		"8/8/5k2/p7/P3KP2/8/8/8 w - - 0 1",
		"8/2p1k3/2P5/1P2K3/8/8/8/8 w - - 0 1",
		"8/kp6/8/PP6/1K6/8/8/8 w - - 0 1",
		"8/6k1/3p4/3P1PK1/8/8/8/8 w - - 0 1",
		"8/3k4/2pP4/2P1K3/8/8/8/8 w - - 0 1",
		"8/1k6/2pK4/8/1P1P4/8/8/8 w - - 0 1",
		"2k5/1p6/1P6/2PK4/8/8/8/8 w - - 0 1",
		"8/8/kpK5/8/P1P5/8/8/8 w - - 0 1",
		"3k4/2p5/2K5/1P1P4/8/8/8/8 w - - 0 1",
		"4k3/8/4KP2/7p/8/6P1/8/8 w - - 0 1",
		"6k1/7p/7K/7P/8/8/6P1/8 w - - 0 1",
		"8/8/8/5kP1/4p2P/4K3/8/8 w - - 0 1",
		"8/2k5/p1P5/P1K5/8/8/8/8 w - - 0 1",
		"8/1pk5/8/1K6/1PP5/8/8/8 w - - 0 1",
		"8/8/8/8/4k1p1/8/4KPP1/8 w - - 0 1",
		"8/8/1kp5/8/K1PP4/8/8/8 w - - 0 1",
		"8/p7/P7/8/8/4k3/4P3/4K3 w - - 0 1",
		"3k4/1K3p2/8/4P3/8/6P1/8/8 w - - 0 1",
		"8/6p1/8/5P2/5P2/5K2/8/6k1 w - - 0 1",
		"8/6p1/8/K6P/7P/1k6/8/8 w - - 0 1",
		"8/6p1/8/4K3/7P/4k2P/8/8 w - - 0 1",
		"5k2/5p2/8/4P3/2K1P3/8/8/8 w - - 0 1",
		"4K3/8/2p5/8/P2k4/8/P7/8 w - - 0 1",
		"8/8/8/8/1k6/4p1P1/6P1/6K1 w - - 0 1",
		"8/6p1/8/8/7K/7P/4k2P/8 w - - 0 1",
		"8/8/3k4/2p2p2/P1K2P2/8/8/8 w - - 0 1",
		"8/p5kp/8/1P6/8/1K6/P7/8 w - - 0 1",
		"8/2k5/2Pp3p/1P6/8/5K2/8/8 w - - 0 1",
		"8/7k/4K2p/6p1/6P1/7P/8/8 w - - 0 1",
		"7k/6p1/6P1/8/8/p5K1/P7/8 w - - 0 1",
		"8/8/8/7p/5Ppk/4KP2/8/8 w - - 0 1",
		"8/8/8/p2K1p2/3P1Pk1/8/8/8 w - - 0 1",
		"8/5k2/5p2/p7/2P1K1P1/8/8/8 w - - 0 1",
		"2K5/8/5p2/3k2p1/P5P1/8/8/8 w - - 0 1",
		"8/8/7p/p7/k1P2K2/8/P7/8 w - - 0 1",
		"8/8/8/KP6/1p6/k4p2/5P2/8 w - - 0 1",
		"8/8/4k3/1p5p/1P5P/4K3/8/8 w - - 0 1",
		"4K3/8/8/1p5p/1P5P/8/8/4k3 w - - 0 1",
		"8/4p2p/8/1K1k4/8/5P2/P7/8 w - - 0 1",
		"8/8/5p2/6p1/P2k2P1/8/8/K7 w - - 0 1",
		"8/p2p4/8/8/8/k7/5P1P/7K w - - 0 1",
		"8/8/2k2ppp/8/P2K2PP/8/8/8 w - - 0 1",
		"8/p6p/4k3/8/4K3/8/P5PP/8 w - - 0 1",
		"8/8/8/1p3k1p/1P5P/5KP1/8/8 w - - 0 1",
		"8/3pp2p/8/1kPP4/5P2/8/1K6/8 w - - 0 1",
		"8/4k1pp/8/4KPPP/8/8/8/8 w - - 0 1",
		"8/p7/Pp6/1P6/8/K2k4/P7/8 w - - 0 1",
		"k7/P7/1P6/4p3/4Pp2/5K2/8/8 w - - 0 1",
		"8/8/8/2p5/2Pp4/3K2Pk/7P/8 w - - 0 1",
		"K7/5p2/k7/6p1/P5P1/8/P7/8 w - - 0 1",
		"8/1p6/p3k3/8/6p1/PP6/4KPP1/8 w - - 0 1",
		"8/1pp5/p2p4/P2P4/1PP5/7k/8/7K w - - 0 1",
		"3k4/2p5/1pKp4/p2P4/2P5/P7/1P6/8 w - - 0 1",
		"7k/8/5PpK/Pp1P2pp/3P4/8/5p2/8 w - - 0 1",
		"k7/2p1pp2/2P3p1/4P1P1/5P2/p7/Kp3P2/8 w - - 0 1",
		"8/2p5/1pPp4/1P1Pp3/4Pp1k/5P2/5KP1/8 w - - 0 1",
		"8/2pp2pp/8/2PP1P2/1p5k/8/PP4p1/6K1 w - - 0 1",
		"3K4/8/8/1n5P/5k2/8/8/8 w - - 0 1",
		"8/8/8/4P3/2k5/6K1/8/2n5 w - - 0 1",
		"8/8/1P6/8/2K2kn1/8/6P1/8 w - - 0 1",
		"8/5n2/8/3P2PK/3k2p1/8/8/8 w - - 0 1",
		"8/7K/7P/1P6/2n4k/4n3/1P6/8 w - - 0 1",
		"8/6b1/5k2/8/P3K1P1/8/8/8 w - - 0 1",
		"8/8/1P6/8/2K2k2/8/1b4P1/8 w - - 0 1",
		"8/2b5/7P/1p6/1P4K1/8/8/5k2 w - - 0 1",
		"6b1/8/2k4K/4P3/7P/8/8/8 w - - 0 1",
		"8/8/5b2/5P2/2P1K1k1/8/8/8 w - - 0 1",
		"4k3/8/2K5/8/PP6/8/8/4b3 w - - 0 1",
		"K7/8/kPP5/1b6/1P6/8/8/8 w - - 0 1",
		"8/5b2/7p/7P/5PP1/8/1K4k1/8 w - - 0 1",
		"4b1k1/4P1P1/5P1K/8/8/8/8/8 w - - 0 1",
		"6k1/3p4/P4P2/2P5/1K6/7b/8/8 w - - 0 1",
		"8/8/1KP5/3r4/8/8/8/k7 w - - 0 1",
		"6K1/1k4P1/6P1/8/8/8/r7/8 w - - 0 1",
		"8/8/8/8/pN6/8/2K5/k7 w - - 0 1",
		"8/3N4/8/8/8/2P1k3/8/7K w - - 0 1",
		"8/8/8/8/2K5/p1N5/Pk6/8 w - - 0 1",
		"8/5k2/7P/6K1/1N6/p7/8/8 w - - 0 1",
		"8/8/4N3/8/7p/3K1k2/7P/8 w - - 0 1",
		"8/8/7p/8/6pp/4N1Pk/5K2/8 w - - 0 1",
		"b3K3/8/3P4/4k1N1/8/8/8/8 w - - 0 1",
		"8/Kb6/1Pk5/8/7N/8/8/8 w - - 0 1",
		"8/8/8/1PK5/3N4/8/5kb1/8 w - - 0 1",
		"8/P1K1k3/8/8/2N5/5b2/8/8 w - - 0 1",
		"8/3PK3/8/N1k5/5b2/8/8/8 w - - 0 1",
		"4k3/8/4N3/5n1P/8/8/8/K7 w - - 0 1",
		"8/7k/8/2K5/1P2N3/n7/8/8 w - - 0 1",
		"K2n4/8/P7/8/2k5/8/2N5/8 w - - 0 1",
		"8/KP1n4/2k5/8/5N2/8/8/8 w - - 0 1",
		"1K6/P7/1nk5/8/4N3/8/8/8 w - - 0 1",
		"k4n2/8/8/2N1P3/5K2/8/8/8 w - - 0 1",
		"8/8/8/5P1p/3N3k/8/8/3n3K w - - 0 1",
		"8/8/2K5/kp2p3/p4P2/3N4/8/3n4 w - - 0 1",
		"8/pK6/pP6/8/8/r6N/8/5k2 w - - 0 1",
		"7k/4K1p1/6Pp/5N1P/8/8/8/8 w - - 0 1",
		"1K6/5p2/k3P3/p7/8/3p4/P1N5/8 w - - 0 1",
		"2n5/8/1PN1Pk2/8/4K3/8/8/8 w - - 0 1",
		"5n2/8/3K4/2N2k1P/8/6P1/8/8 w - - 0 1",
		"5n2/8/7P/4k1P1/p4N2/8/5K2/8 w - - 0 1",
		"8/8/2k4b/P7/8/8/2N2PKp/8 w - - 0 1",
		"4k3/3p1N2/8/P1P4b/8/8/7K/8 w - - 0 1",
		"8/1pN2p2/1P6/8/2P5/5k2/b7/6K1 w - - 0 1",
		"8/8/P4PK1/8/6N1/8/8/r6k w - - 0 1",
		"8/7p/1P5K/3N1r2/8/3k4/6P1/8 w - - 0 1",
		"1k2N2b/2p4P/2p2p2/2P2P2/8/5K2/8/8 w - - 0 1",
		"2K5/p7/k1B5/p7/p7/8/8/8 w - - 0 1",
		"8/4k3/8/7P/4B3/5K2/8/8 w - - 0 1",
		"4k3/8/8/7P/8/4K2B/8/8 w - - 0 1",
		"6K1/8/7p/8/k7/2B5/1P6/8 w - - 0 1",
		"8/3k4/P7/K7/1B6/1p6/8/8 w - - 0 1",
		"6k1/3p4/8/8/8/B7/P7/7K w - - 0 1",
		"8/8/k1K5/8/pB6/P7/8/8 w - - 0 1",
		"8/2P5/1K6/3k4/8/p7/6p1/B7 w - - 0 1",
		"8/3p4/8/7p/1KPk4/8/B7/8 w - - 0 1",
		"8/8/8/1pk1K3/2p5/8/1P5B/8 w - - 0 1",
		"8/k7/8/1pK5/p4B2/P7/8/8 w - - 0 1",
		"8/8/3p4/4p2B/4P3/8/4K1kp/8 w - - 0 1",
		"8/3K4/3P1p2/p4p2/k3B3/p7/8/8 w - - 0 1",
		"3n4/2K5/1P6/k7/2B5/8/8/8 w - - 0 1",
		"8/8/3B4/8/7K/5k1P/8/3n4 w - - 0 1",
		"6K1/5P2/6k1/2b5/8/8/3B4/8 w - - 0 1",
		"3B4/5K2/4P3/2bk4/8/8/8/8 w - - 0 1",
		"8/4B1b1/6P1/5K1k/8/8/8/8 w - - 0 1",
		"5k2/8/6PK/8/8/2b3B1/8/8 w - - 0 1",
		"8/8/6K1/4B2P/6k1/4b3/8/8 w - - 0 1",
		"2KB4/1P6/2k5/8/8/8/7b/8 w - - 0 1",
		"2k5/P1p5/1n2K3/8/4B3/8/8/8 w - - 0 1",
		"2B5/8/5k1K/4p3/1b4P1/8/8/8 w - - 0 1",
		"1B6/8/7P/4p3/3b3k/8/8/2K5 w - - 0 1",
		"6b1/5p2/8/2B2K2/7k/8/6P1/8 w - - 0 1",
		"b7/6K1/2p5/8/4Pp2/8/2k3B1/8 w - - 0 1",
		"6k1/8/p4K2/2P5/6p1/1b6/8/5B2 w - - 0 1",
		"k7/8/3P2K1/B7/8/8/7r/8 w - - 0 1",
		"8/8/1P6/3K4/1k6/5rB1/8/8 w - - 0 1",
		"8/8/2P5/4K3/8/1B5k/6r1/8 w - - 0 1",
		"8/8/P7/3p3r/3k3B/3P4/5K2/8 w - - 0 1",
		"4k3/8/1P2b3/4K3/4B3/8/8/r7 w - - 0 1",
		"8/3b1K1B/6Pk/8/8/8/7P/8 w - - 0 1",
		"5k2/8/5K2/6P1/5P2/1bB5/8/8 w - - 0 1",
		"5b2/5k2/8/4P3/5P2/5K2/4B3/8 w - - 0 1",
		"8/8/8/4bk2/8/8/3B1PP1/5K2 w - - 0 1",
		"8/8/7k/8/8/6Pb/4B2P/6K1 w - - 0 1",
		"8/5b2/8/4k3/4B3/3PKP2/8/8 w - - 0 1",
		"4k3/4P3/8/4Pp2/7K/8/4B2n/8 w - - 0 1",
		"4b2k/7p/1p6/6K1/2P1B1P1/8/8/8 w - - 0 1",
		"k2K4/8/6P1/2B5/5P2/p7/4p2b/8 w - - 0 1",
		"K7/8/Pp6/kp6/1n6/1P6/8/B7 w - - 0 1",
		"6n1/7k/2p2p2/8/P2P4/8/8/2B4K w - - 0 1",
		"8/8/2r3pP/6P1/8/K7/7k/3B4 w - - 0 1",
		"1kr5/4P1Pp/8/8/8/B7/7K/8 w - - 0 1",
		"4k3/4p3/P2p4/8/2bP4/p7/2P5/K2B4 w - - 0 1",
		"8/2p2b2/Pp1p4/4pp2/k7/2P5/1P2BPK1/8 w - - 0 1",
		"8/1K6/8/8/3pk3/8/8/R7 w - - 0 1",
		"K6R/8/7p/6k1/8/8/8/8 w - - 0 1",
		"K5R1/8/6p1/5k2/8/8/8/8 w - - 0 1",
		"8/7p/8/8/6k1/8/8/KR6 w - - 0 1",
		"1R6/8/8/7p/6k1/8/8/K7 w - - 0 1",
		"8/5K2/R7/8/p7/k7/8/8 w - - 0 1",
		"3R4/4K3/8/5kp1/8/8/8/8 w - - 0 1",
		"2R5/7k/5K2/8/p7/8/1p6/8 w - - 0 1",
		"K7/2k5/R7/8/5p2/6p1/8/8 w - - 0 1",
		"8/8/8/3R4/2K5/6pp/k7/8 w - - 0 1",
		"8/8/p4K1R/8/p7/8/8/k7 w - - 0 1",
		"6k1/8/4K3/3R4/3p4/8/7b/8 w - - 0 1",
		"8/p7/8/1P6/8/3K4/p3R3/1k6 w - - 0 1",
		"8/kp6/4R3/1P2K3/8/3pp3/8/8 w - - 0 1",
		"8/8/8/pp5R/k6p/2K5/1P4p1/8 w - - 0 1",
		"5Rn1/7b/8/8/k5P1/8/3K4/8 w - - 0 1",
		"8/8/4P2R/8/1r6/k7/8/K7 w - - 0 1",
		"8/8/8/4kr1P/7K/8/8/7R w - - 0 1",
		"3r4/8/8/8/k2P4/3K4/8/1R6 w - - 0 1",
		"K7/P5R1/2k5/8/8/8/2r5/8 w - - 0 1",
		"R7/P7/8/8/6K1/8/6k1/r7 w - - 0 1",
		"K7/P3k3/8/8/8/8/2R5/1r6 w - - 0 1",
		"R7/1K1k4/P7/8/8/8/8/2r5 w - - 0 1",
		"r7/8/4k3/P7/K7/3R4/8/8 w - - 0 1",
		"8/r4k2/8/8/P7/K3R3/8/8 w - - 0 1",
		"6K1/6R1/r5P1/8/7k/8/8/8 w - - 0 1",
		"7r/6k1/1P6/8/8/5R2/8/K7 w - - 0 1",
		"1r6/4k3/8/8/1P6/1K6/8/3R4 w - - 0 1",
		"1r6/8/8/5k2/8/1P6/1K6/4R3 w - - 0 1",
		"8/k7/8/3P4/7r/2K5/1R6/8 w - - 0 1",
		"3K4/3P2k1/8/8/8/8/2r5/5R2 w - - 0 1",
		"6k1/r2KP3/8/8/8/8/8/5R2 w - - 0 1",
		"8/1r2K3/4P1k1/8/8/8/8/R7 w - - 0 1",
		"8/8/7k/4P3/r7/4K3/8/6R1 w - - 0 1",
		"4r3/8/7k/8/8/4P3/4K3/6R1 w - - 0 1",
		"1K6/1P1k4/1P6/8/8/r7/2R5/8 w - - 0 1",
		"8/8/P7/8/3K4/r7/P2R4/k7 w - - 0 1",
		"2R5/2P5/1k6/8/7r/1K5P/1P6/8 w - - 0 1",
		"8/8/P5rk/8/8/KpR5/8/8 w - - 0 1",
		"8/8/6P1/8/5p1k/r7/6K1/2R5 w - - 0 1",
		"6k1/4K3/8/r4p2/4P3/8/8/5R2 w - - 0 1",
		"8/8/2P2K2/8/6pr/6k1/R7/8 w - - 0 1",
		"4k3/6K1/1P6/8/1p6/8/r7/6R1 w - - 0 1",
		"3r4/P4Kp1/k7/8/8/8/1R6/8 w - - 0 1",
		"2K5/2P2R2/k7/8/8/8/2r2p2/8 w - - 0 1",
		"R6K/7P/p6k/r7/8/8/8/8 w - - 0 1",
		"8/8/1P6/8/2k3pr/8/3RK3/8 w - - 0 1",
		"8/6pP/6R1/7r/8/8/5K2/7k w - - 0 1",
		"8/5R2/4PK2/2r5/8/2k1p3/8/8 w - - 0 1",
		"8/8/2R3P1/8/7p/4k3/3r4/7K w - - 0 1",
		"8/8/1R4P1/5p2/3K4/k3p3/4r3/8 w - - 0 1",
		"K7/2rp4/8/2p3P1/8/8/5R2/7k w - - 0 1",
		"8/R1p5/5pP1/8/8/7K/1k6/2r5 w - - 0 1",
		"7k/8/4K1Rp/6pP/5p1r/8/8/8 w - - 0 1",
		"k7/p2K1p2/7R/r1p1P3/1p6/8/8/8 w - - 0 1",
		"8/2k5/2P3Pr/8/8/8/6p1/2R3K1 w - - 0 1",
		"1R6/2pk4/1P6/8/3r4/K7/P7/8 w - - 0 1",
		"2r5/6k1/6p1/P7/3P4/8/6K1/3R4 w - - 0 1",
		"6R1/3r3p/2p2pP1/8/p1P5/8/5K1k/8 w - - 0 1",
		"5R2/1n6/P6k/8/1P5r/8/3K1p2/8 w - - 0 1",
		"5r1k/R5p1/6Pp/5P1K/7P/1p1p4/8/8 w - - 0 1",
		"8/r4kp1/5p1p/3R1K1P/4PPP1/8/8/8 w - - 0 1",
		"8/Q5K1/8/8/8/8/3kp3/8 w - - 0 1",
		"8/8/8/4K3/8/8/3Q1p2/6k1 w - - 0 1",
		"8/8/8/8/6K1/6Q1/2p5/3k4 w - - 0 1",
		"5Q2/8/8/8/K7/8/2p5/1k6 w - - 0 1",
		"Q7/8/8/8/8/8/pk2K3/8 w - - 0 1",
		"Q7/8/8/3K4/8/8/pk6/8 w - - 0 1",
		"8/KQ6/8/8/8/8/p7/k7 w - - 0 1",
		"7Q/8/1K6/8/p7/8/7p/6k1 w - - 0 1",
		"3Q4/kr6/2K5/8/8/8/8/8 w - - 0 1",
		"7Q/8/8/8/8/8/6rp/4K2k w - - 0 1",
		"8/P7/R7/8/2q5/5K2/7k/8 w - - 0 1",
		"8/5P1k/5Q2/7q/8/6K1/8/8 w - - 0 1",
		"8/3KP1q1/8/8/8/4Q3/k7/8 w - - 0 1",
		"6K1/5P2/6Q1/3q4/1k6/8/8/8 w - - 0 1",
		"K7/1P6/k1q5/8/8/1Q6/8/8 w - - 0 1",
		"6k1/5q2/3Pp2K/8/4Q3/8/8/8 w - - 0 1",
		"8/7q/2K2p2/4p3/2k1P2p/8/3P4/7Q w - - 0 1",
		"2b4q/4K3/4p3/p2p1pk1/8/1P3P2/2P5/1Q6 w - - 0 1",
		"8/8/8/8/5k2/3q1N2/Q4K2/8 w - - 0 1",
		"8/5B2/q7/8/4k3/8/5K2/3Q4 w - - 0 1",
		"1QK3kq/6p1/8/6B1/8/8/8/8 w - - 0 1",
		"8/8/8/8/1q6/3Q3K/p7/k1N5 w - - 0 1",
		"8/2K5/2N5/pk6/q7/4Q3/8/8 w - - 0 1",
		"K7/8/8/5q2/3Q4/k6p/4N3/8 w - - 0 1",
		"8/8/1q1p4/1ppp4/8/5N1K/5k2/3Q4 w - - 0 1",
		"1R6/8/8/6K1/8/2Q5/qr6/k7 w - - 0 1",
		"3q3b/2pp4/8/2B5/8/1k6/3P3Q/3K4 w - - 0 1",
		"3q2r1/6P1/p7/8/8/k3N1Qp/8/2K5 w - - 0 1",
		"8/8/2Q4K/5p2/1k1qn1N1/1P3p2/5P2/8 w - - 0 1",
		"6q1/7k/1r2NQ2/1p4p1/5PP1/1K3p2/8/8 w - - 0 1",
		"8/K6N/8/2N5/1n6/6Q1/6pn/7k w - - 0 1",
		"3KNB1k/7p/8/8/8/8/3n4/8 w - - 0 1",
		"3K4/1p5p/1p6/8/8/1B6/1p6/b1k3B1 w - - 0 1",
		"8/8/4P3/k1N4r/8/K3N3/8/8 w - - 0 1",
		"8/5B2/p7/q5B1/k7/3K4/1P6/8 w - - 0 1",
		"2b4k/8/5Pr1/5N2/8/8/8/K1B5 w - - 0 1",
		"N7/1p1kqP2/8/3P4/KP6/4B3/8/8 w - - 0 1",
		"8/8/8/8/5N2/p1RK4/pk6/8 w - - 0 1",
		"2k5/6R1/N7/8/8/6K1/7p/5b2 w - - 0 1",
		"8/2k3Nr/8/3K4/1R6/8/8/8 w - - 0 1",
		"3Nk3/r7/7R/8/3K4/8/8/8 w - - 0 1",
		"R7/8/8/8/4K2p/8/8/3k1N1r w - - 0 1",
		"8/b7/8/8/7K/1R6/2n5/N2k4 w - - 0 1",
		"8/8/8/1K2k1n1/1n6/5R2/8/4N3 w - - 0 1",
		"8/8/7n/3k4/B4p2/8/8/b2K2R1 w - - 0 1",
		"7k/7p/B7/1K6/8/1n3b2/8/5R2 w - - 0 1",
		"8/8/8/5p2/8/3R4/P7/1k1K1B1r w - - 0 1",
		"3N4/4R3/6k1/8/5K1P/8/5p2/8 w - - 0 1",
		"q3N1R1/p7/8/8/4P2k/8/4K2P/8 w - - 0 1",
		"3N4/2p5/8/3q4/3k4/8/3PKP2/R7 w - - 0 1",
		"5q2/2R5/5p2/1k3N2/2p1P3/2P5/2K5/8 w - - 0 1",
		"1q3k2/7K/1P1P1p2/R2P4/8/B5b1/8/8 w - - 0 1",
		"2K5/4p3/1p1p1p2/1p2k3/1P3q2/8/1PBPPP2/7R w - - 0 1",
		"RK6/8/1k6/7R/8/8/pp6/8 w - - 0 1",
		"8/8/8/8/7k/6pq/R1R5/4K3 w - - 0 1",
		"8/4r3/1P5K/8/1p2kr2/8/R7/R7 w - - 0 1",
		"5kr1/7R/3K4/7R/2p5/2P1p1r1/8/8 w - - 0 1",
		"1B6/8/5kP1/8/8/7K/8/1r1B2N1 w - - 0 1",
	}
	for _, tc := range ts {
		t.Run(fmt.Sprintf("FEN converts %v back to itself", tc), func(t *testing.T) {
			g, err := NewGameFromFEN(tc)
			require.NoError(t, err)
			assert.Equal(t, tc, g.ToFEN())
		})
	}
}
